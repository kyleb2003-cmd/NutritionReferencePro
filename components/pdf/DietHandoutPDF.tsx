import { Document, Font, Image, Link, Page, StyleSheet, Text, View } from '@react-pdf/renderer'
import type { DietHandout } from '@/content/diets'

Font.registerHyphenationCallback((word) => [word])

const BASE_FONT = 'Helvetica'
const BOLD_FONT = 'Helvetica-Bold'

const createStyles = (options: { hasBranding: boolean }) => {
  const accent = options.hasBranding ? '#047857' : '#1F2937'
  const heading = options.hasBranding ? '#0F172A' : '#111827'
  const body = '#1F2937'

  return StyleSheet.create({
    page: {
      fontFamily: BASE_FONT,
      paddingTop: 72,
      paddingBottom: 96,
      paddingHorizontal: 72,
      lineHeight: 1.4,
      fontSize: 11.5,
      color: body,
    },
    footer: {
      position: 'absolute',
      left: 72,
      right: 72,
      bottom: 48,
      flexDirection: 'row',
      justifyContent: 'space-between',
      fontSize: 9.5,
      color: '#4B5563',
      letterSpacing: 0.1,
    },
    titleBlock: {
      marginBottom: 32,
      textAlign: 'center',
    },
    title: {
      fontFamily: BOLD_FONT,
      fontSize: 22,
      letterSpacing: 0.6,
      color: heading,
    },
    subtitle: {
      marginTop: 8,
      fontSize: 12,
      letterSpacing: 0.3,
      color: '#374151',
    },
    notesBox: {
      marginTop: 16,
      borderWidth: 1,
      borderColor: '#E5E7EB',
      borderRadius: 6,
      padding: 12,
      textAlign: 'left',
      backgroundColor: '#F9FAFB',
    },
    notesHeading: {
      fontFamily: BOLD_FONT,
      fontSize: 11.5,
      color: heading,
      marginBottom: 6,
    },
    notesText: {
      fontSize: 11.5,
      color: body,
    },
    section: {
      marginBottom: 18,
    },
    sectionHeading: {
      fontFamily: BOLD_FONT,
      fontSize: 16,
      color: heading,
      letterSpacing: 0.4,
      marginBottom: 8,
    },
    paragraph: {
      fontSize: 11.5,
      color: body,
    },
    mealPlanIntro: {
      fontSize: 11,
      color: '#4B5563',
      fontStyle: 'italic',
      marginBottom: 12,
    },
    mealDay: {
      fontFamily: BOLD_FONT,
      fontSize: 12.5,
      color: accent,
      marginTop: 12,
      marginBottom: 6,
    },
    bulletItem: {
      flexDirection: 'row',
      alignItems: 'flex-start',
      gap: 6,
      marginBottom: 4,
    },
    bulletSymbol: {
      fontFamily: BOLD_FONT,
      fontSize: 11,
      marginTop: 1,
      color: accent,
    },
    bulletText: {
      flex: 1,
      fontSize: 11.3,
      color: body,
    },
    samplePlateImage: {
      width: '100%',
      maxHeight: 360,
      objectFit: 'contain',
      marginBottom: 16,
    },
    swapsRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'flex-start',
      gap: 12,
      paddingVertical: 6,
      borderBottomWidth: 1,
      borderBottomColor: '#E5E7EB',
    },
    swapFrom: {
      flex: 1,
      fontSize: 11.5,
      color: '#374151',
    },
    swapTo: {
      flex: 1,
      fontSize: 11.5,
      fontFamily: BOLD_FONT,
      color: accent,
      textAlign: 'right',
    },
    moreInfoLink: {
      fontSize: 11.5,
      color: accent,
      textDecoration: 'underline',
    },
    disclaimer: {
      marginTop: 18,
      fontSize: 10.5,
      color: '#4B5563',
    },
  })
}

export type DietHandoutPDFProps = {
  dietName: string
  patientName: string
  practitionerNotes: string
  clinicName: string
  printDate: string
  handout: DietHandout
  hasBranding: boolean
  samplePlateImage?: string | null
}

function renderBullets(lines: string[], styles: ReturnType<typeof createStyles>) {
  return lines.map((line) => (
    <View style={styles.bulletItem} key={line}>
      <Text style={styles.bulletSymbol}>•</Text>
      <Text style={styles.bulletText}>{line}</Text>
    </View>
  ))
}

function renderFooter(styles: ReturnType<typeof createStyles>, clinicName: string, printDate: string) {
  return (
    <View style={styles.footer} fixed>
      <Text>{clinicName}</Text>
      <Text>Generated by Nutrition Reference Pro on {printDate}</Text>
    </View>
  )
}

export default function DietHandoutPDF(props: DietHandoutPDFProps) {
  const styles = createStyles({ hasBranding: props.hasBranding })

  const title = `${props.dietName} Diet — A Practical Guide`
  const preparedLine = `Prepared for ${props.patientName}`

  return (
    <Document>
      <Page size="LETTER" style={styles.page}>
        <View style={styles.titleBlock}>
          <Text style={styles.title}>{title}</Text>
          <Text style={styles.subtitle}>{preparedLine}</Text>
          {props.practitionerNotes ? (
            <View style={styles.notesBox}>
              <Text style={styles.notesHeading}>Practitioner’s Notes</Text>
              <Text style={styles.notesText}>{props.practitionerNotes}</Text>
            </View>
          ) : null}
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionHeading}>What it is</Text>
          <Text style={styles.paragraph}>{props.handout.whatItIs}</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionHeading}>Who it’s for</Text>
          <Text style={styles.paragraph}>{props.handout.whoItsFor}</Text>
        </View>

        {renderFooter(styles, props.clinicName, props.printDate)}
      </Page>

      <Page size="LETTER" style={styles.page}>
        <View style={styles.section}>
          <Text style={styles.sectionHeading}>Sample 3-Day Meal Plan</Text>
          <Text style={styles.mealPlanIntro}>{props.handout.mealPlan.intro}</Text>
          {props.handout.mealPlan.days.map((day) => (
            <View key={day.title} wrap={false}>
              <Text style={styles.mealDay}>{day.title}</Text>
              {renderBullets(day.meals, styles)}
            </View>
          ))}
        </View>
        {renderFooter(styles, props.clinicName, props.printDate)}
      </Page>

      <Page size="LETTER" style={styles.page}>
        <View style={styles.section}>
          <Text style={styles.sectionHeading}>Sample Plate</Text>
          {props.samplePlateImage ? (
            <Image alt="Sample plate" src={props.samplePlateImage} style={styles.samplePlateImage} />
          ) : null}
          <Text style={styles.paragraph}>{props.handout.samplePlate.description}</Text>
        </View>
        {renderFooter(styles, props.clinicName, props.printDate)}
      </Page>

      <Page size="LETTER" style={styles.page}>
        <View style={styles.section}>
          <Text style={styles.sectionHeading}>Swap this for that</Text>
          {props.handout.swaps.map((swap) => (
            <View key={`${swap.from}-${swap.to}`} style={styles.swapsRow} wrap={false}>
              <Text style={styles.swapFrom}>{swap.from}</Text>
              <Text style={styles.swapTo}>{swap.to}</Text>
            </View>
          ))}
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionHeading}>For more information</Text>
          {props.handout.moreInfo.map((info) => (
            <View key={info.url} style={styles.bulletItem}>
              <Text style={styles.bulletSymbol}>•</Text>
              <Link src={info.url} style={styles.moreInfoLink}>
                {info.label}
              </Link>
            </View>
          ))}
        </View>

        <Text style={styles.disclaimer}>{props.handout.disclaimer}</Text>

        {renderFooter(styles, props.clinicName, props.printDate)}
      </Page>
    </Document>
  )
}
